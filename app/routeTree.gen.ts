/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AppRouteRouteImport } from './routes/_app/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppProjectsRouteImport } from './routes/_app/projects'
import { Route as AppProjectProjectIdRouteImport } from './routes/_app/project.$projectId'
import { Route as AppPlatePlateIdIndexRouteImport } from './routes/_app/plate.$plateId/index'
import { Route as AppObservationObservationIdIndexRouteImport } from './routes/_app/observation.$observationId/index'
import { Route as AppSpectrumSpectrumIdImageRouteImport } from './routes/_app/spectrum.$spectrumId/image'
import { ServerRoute as AppPlatePlateIdImageServerRouteImport } from './routes/_app/plate.$plateId/image'
import { ServerRoute as AppObservationObservationIdImageServerRouteImport } from './routes/_app/observation.$observationId/image'

const rootServerRouteImport = createServerRootRoute()

const AppRouteRoute = AppRouteRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppProjectsRoute = AppProjectsRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppProjectProjectIdRoute = AppProjectProjectIdRouteImport.update({
  id: '/project/$projectId',
  path: '/project/$projectId',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppPlatePlateIdIndexRoute = AppPlatePlateIdIndexRouteImport.update({
  id: '/plate/$plateId/',
  path: '/plate/$plateId/',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppObservationObservationIdIndexRoute =
  AppObservationObservationIdIndexRouteImport.update({
    id: '/observation/$observationId/',
    path: '/observation/$observationId/',
    getParentRoute: () => AppRouteRoute,
  } as any)
const AppSpectrumSpectrumIdImageRoute =
  AppSpectrumSpectrumIdImageRouteImport.update({
    id: '/spectrum/$spectrumId/image',
    path: '/spectrum/$spectrumId/image',
    getParentRoute: () => AppRouteRoute,
  } as any)
const AppPlatePlateIdImageServerRoute =
  AppPlatePlateIdImageServerRouteImport.update({
    id: '/_app/plate/$plateId/image',
    path: '/plate/$plateId/image',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const AppObservationObservationIdImageServerRoute =
  AppObservationObservationIdImageServerRouteImport.update({
    id: '/_app/observation/$observationId/image',
    path: '/observation/$observationId/image',
    getParentRoute: () => rootServerRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/projects': typeof AppProjectsRoute
  '/project/$projectId': typeof AppProjectProjectIdRoute
  '/spectrum/$spectrumId/image': typeof AppSpectrumSpectrumIdImageRoute
  '/observation/$observationId': typeof AppObservationObservationIdIndexRoute
  '/plate/$plateId': typeof AppPlatePlateIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/projects': typeof AppProjectsRoute
  '/project/$projectId': typeof AppProjectProjectIdRoute
  '/spectrum/$spectrumId/image': typeof AppSpectrumSpectrumIdImageRoute
  '/observation/$observationId': typeof AppObservationObservationIdIndexRoute
  '/plate/$plateId': typeof AppPlatePlateIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_app': typeof AppRouteRouteWithChildren
  '/_app/projects': typeof AppProjectsRoute
  '/_app/project/$projectId': typeof AppProjectProjectIdRoute
  '/_app/spectrum/$spectrumId/image': typeof AppSpectrumSpectrumIdImageRoute
  '/_app/observation/$observationId/': typeof AppObservationObservationIdIndexRoute
  '/_app/plate/$plateId/': typeof AppPlatePlateIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/projects'
    | '/project/$projectId'
    | '/spectrum/$spectrumId/image'
    | '/observation/$observationId'
    | '/plate/$plateId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/projects'
    | '/project/$projectId'
    | '/spectrum/$spectrumId/image'
    | '/observation/$observationId'
    | '/plate/$plateId'
  id:
    | '__root__'
    | '/'
    | '/_app'
    | '/_app/projects'
    | '/_app/project/$projectId'
    | '/_app/spectrum/$spectrumId/image'
    | '/_app/observation/$observationId/'
    | '/_app/plate/$plateId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/observation/$observationId/image': typeof AppObservationObservationIdImageServerRoute
  '/plate/$plateId/image': typeof AppPlatePlateIdImageServerRoute
}
export interface FileServerRoutesByTo {
  '/observation/$observationId/image': typeof AppObservationObservationIdImageServerRoute
  '/plate/$plateId/image': typeof AppPlatePlateIdImageServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/_app/observation/$observationId/image': typeof AppObservationObservationIdImageServerRoute
  '/_app/plate/$plateId/image': typeof AppPlatePlateIdImageServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/observation/$observationId/image' | '/plate/$plateId/image'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/observation/$observationId/image' | '/plate/$plateId/image'
  id:
    | '__root__'
    | '/_app/observation/$observationId/image'
    | '/_app/plate/$plateId/image'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  AppObservationObservationIdImageServerRoute: typeof AppObservationObservationIdImageServerRoute
  AppPlatePlateIdImageServerRoute: typeof AppPlatePlateIdImageServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/projects': {
      id: '/_app/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof AppProjectsRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/project/$projectId': {
      id: '/_app/project/$projectId'
      path: '/project/$projectId'
      fullPath: '/project/$projectId'
      preLoaderRoute: typeof AppProjectProjectIdRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/plate/$plateId/': {
      id: '/_app/plate/$plateId/'
      path: '/plate/$plateId'
      fullPath: '/plate/$plateId'
      preLoaderRoute: typeof AppPlatePlateIdIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/observation/$observationId/': {
      id: '/_app/observation/$observationId/'
      path: '/observation/$observationId'
      fullPath: '/observation/$observationId'
      preLoaderRoute: typeof AppObservationObservationIdIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/spectrum/$spectrumId/image': {
      id: '/_app/spectrum/$spectrumId/image'
      path: '/spectrum/$spectrumId/image'
      fullPath: '/spectrum/$spectrumId/image'
      preLoaderRoute: typeof AppSpectrumSpectrumIdImageRouteImport
      parentRoute: typeof AppRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/_app/plate/$plateId/image': {
      id: '/_app/plate/$plateId/image'
      path: '/plate/$plateId/image'
      fullPath: '/plate/$plateId/image'
      preLoaderRoute: typeof AppPlatePlateIdImageServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/_app/observation/$observationId/image': {
      id: '/_app/observation/$observationId/image'
      path: '/observation/$observationId/image'
      fullPath: '/observation/$observationId/image'
      preLoaderRoute: typeof AppObservationObservationIdImageServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AppRouteRouteChildren {
  AppProjectsRoute: typeof AppProjectsRoute
  AppProjectProjectIdRoute: typeof AppProjectProjectIdRoute
  AppSpectrumSpectrumIdImageRoute: typeof AppSpectrumSpectrumIdImageRoute
  AppObservationObservationIdIndexRoute: typeof AppObservationObservationIdIndexRoute
  AppPlatePlateIdIndexRoute: typeof AppPlatePlateIdIndexRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppProjectsRoute: AppProjectsRoute,
  AppProjectProjectIdRoute: AppProjectProjectIdRoute,
  AppSpectrumSpectrumIdImageRoute: AppSpectrumSpectrumIdImageRoute,
  AppObservationObservationIdIndexRoute: AppObservationObservationIdIndexRoute,
  AppPlatePlateIdIndexRoute: AppPlatePlateIdIndexRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  AppObservationObservationIdImageServerRoute:
    AppObservationObservationIdImageServerRoute,
  AppPlatePlateIdImageServerRoute: AppPlatePlateIdImageServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
